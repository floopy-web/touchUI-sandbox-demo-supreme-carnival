<!--67Video-->
<template>
  <ui-page>
    <ui-view class="btn-area">
      <ui-view>
        <ui-video initial-time="{{5}}" page-gesture="true" enable-progress-gesture="{{false}}" id="myVideo" style="width:100%" src="{{ videoSrc }}"
          danmu-list="{{danmuList}}" enable-danmu danmu-btn controls bindwaiting="bindwaiting" binderror="binderror" bindfullscreenchange="bindfullscreenchange"></ui-video>
      </ui-view>
      <ui-button type="primary" bindtap="bindSendDanmu">发送弹幕</ui-button>
    </ui-view>
  </ui-page>
</template>

<script>
// video.js
var videoContext;
function getRandomColor() {
  const rgb = [];
  for (let i = 0; i < 3; ++i) {
    let color = Math.floor(Math.random() * 256).toString(16);
    color = color.length == 1 ? "0" + color : color;
    rgb.push(color);
  }
  return "#" + rgb.join("");
}
export default {
  config: {
    navigationBarTitleText: "视频组件"
  },
  data() {
    return {
      videoSrc:
        "http://images.uileader.com/20171024/392f790e-4c5b-4909-83dd-d13e94bcd64f.mp4",
      danmuList: [
        {
          text: "第 1s 出现的弹幕",
          color: "#ff0000",
          time: 1
        },
        {
          text: "第 3s 出现的弹幕",
          color: "#ff00ff",
          time: 3
        }
      ]
    };
  },
  methods: {
    onReady: function(res) {
      videoContext = ui.createVideoContext("myVideo");
    },
    binderror(e) {},
    bindplay(e) {},
    bindpause(e) {},
    bindended(e) {},
    bindtimeupdate(e) {},
    bindfullscreenchange(e) {
      console.log(e);
    },
    bindSendDanmu() {
      videoContext.sendDanmu({
        text: "弹幕",
        color: getRandomColor()
      });
    },
    bindwaiting() {
      console.log("bindwaiting缓冲");
    },
    binderror() {
      console.log("binderror缓冲");
    }
  },
  mounted() {
    this.onReady();
  }
};
</script>

<style lang="less">
// video.less
.btn-area {
  padding: 0px 15px;
}
</style>