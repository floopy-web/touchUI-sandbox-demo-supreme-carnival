<template>
  <ui-page page-load="{{ pageLoad }}">
      <ui-view class="sliderContent" ui:if="{{isShow}}">
        <ui-slider width="260"></ui-slider>      
      </ui-view>
      <ui-view class="buttonContent">
        <ui-button bindTap="buttonEvent()"> Test Event </ui-button>
        <ui-button type="primary" bindTap="navToPage('/pages/componentsDemo/0componentsIndex')"> Components demos page</ui-button>
        <ui-button type="primary" bindtap="sliderShow">slider 创建滑动条控件</ui-button>
        <ui-button type="primary" bindtap="navToPage('/pages/detail')">{{ buttonText }}</ui-button>
        <ui-button type="primary" bindtap="redirectToPage('/pages/new-page')">RedirectTo new-page</ui-button>
        <ui-button type="primary" bindtap="navToPage('/pages/helloWorldPage')"> Nav go to new Test Page </ui-button>
        <ui-button type="primary" bindtap="switchTab('/pages/helloWorldPage')"> switchTab to new Test Page </ui-button>
        <ui-button type="secondary" bindTap="showLoadingIndicator()"> Show loading indicator </ui-button>
        <!-- Buggy. <ui-button type="secondary" bindTap="showDialog()"> Show dialog </ui-button> -->
        <ui-button type="secondary" bindTap="showActionSheet()"> Show ActionSheet </ui-button>
        <ui-button bindTap="changeNavBarColour()"> Change NavBar colour </ui-button>

      </ui-view>
  </ui-page>
</template>

<script>
export default {
  config: {
    navigationBarTitleText: "Home 首页",
    backgroundColor: "#F4F4F4",
    navigationBarTextStyle: "black"
  },
  data() {
    return {
      pageLoad: {
        trigger: "always",
        handle: () => {
          console.log("index:: pageLoad::");
          const getData = ui.getQuery();
          ui.showAlert({
            title: "PageLoadedTitle Alert",
            content: "alert text" + getData
          });
          ui.setNavigationBarColor({
            gradient: "linear-gradient(85deg, #AABB44, #7766FF)"
          });
        }
      },
      buttonText: "ButtontextNav 界面跳转",
      isShow: false
    };
  },
  methods: {
    buttonEvent(event) {
      console.log("button event test", event);
    },
    // Pre-made completion debug messages
    statusHandler(status, message) {
      // E.g. status Success/Fail.
      console.log("status", message);
    },
    completeHandler(message) {
      console.log("Complete", message);
    },
    changeNavBarColour() {
      console.log("changeNavBarColour::");
      ui.setNavigationBarColor({
        gradient: "linear-gradient(45deg, #FF8E00, #FF4F00)"
      });
    },
    showActionSheet() {
      console.log("showActionSheet");
      ui.showActionSheet("actionsheettest");
    },
    sliderShow() {
      this.isShow = true;
    },
    // Navigation functions don't work if page is a tabPage.
    navToPage(pageUrl, params) {
      console.log("index::navToPage::", pageUrl, params);
      ui.navigateTo({
        url: pageUrl,
        success: this.statusHandler("Success", "nav " + pageUrl),
        fail: this.statusHandler("Fail", "nav " + pageUrl),
        complete: this.statusHandler("Completed nav " + pageUrl)
      });
    },
    redirectToPage(pageUrl, params) {
      console.log("index:: navToPage::", pageUrl, params);
      ui.redirectTo({
        url: pageUrl,
        success: this.statusHandler("Success", "redirect " + pageUrl),
        fail: this.statusHandler("Fail", "redirect " + pageUrl),
        complete: this.statusHandler("Completed redirect " + pageUrl)
      });
    },
    switchTab(pageUrl, params) {
      console.log("index:: switchTab::");
      ui.switchTab({
        url: pageUrl
      });
    },
    // Shows Loading popbox until ui.hideLoading() is called
    showLoadingIndicator() {
      ui.showLoading({
        text: "Loading for 3 seconds..."
      });
      setTimeout(res => {
        ui.hideLoading();
      }, 3000);
    }
  },
  mounted() {
    //首屏页面需要在mounted中延时才能调用框架api，其他页面不需要延时
    setTimeout(() => {
      //关闭app启动图
      ui.closeSplashscreen();
    }, 1000);
  }
};
</script>

<style lang="less">
.content {
  .mix-flex-center();
}
.sliderContent {
  padding: 50px 50px 0px 50px;
}
.buttonContent {
  padding: 50px;
}
</style>
